{
  "name": "Layerprox",
  "tagline": "a rebuild of marionette, an encrypted traffic obfuscation proxy, simulates general webtraffic",
  "body": "# LayerProx\r\nA rebuild of marionette, encrypted proxy that simulates general webtraffic.\r\n\r\nMakes Real looking http packages, to avoid censorship why not make the \r\ndata look like social media or something other?\r\n\r\nLayerProx takes the orignal data and encrypts it and makes it look like\r\nhttp. At the moment I have implemented ebay, amazon, facebook etc.. plugins to\r\ngenerate http requests that looks like you are just visiting a popular site\r\nwhile you are really looking at something else or useing another protocol\r\n\r\nStronger than a vpn, Smarter than a proxy.\r\n\r\nLayerProx believes in Privacy so it comes with a Warrant Canary\r\n\r\n**Provides strong end to end encryption with PGP + AES-CTR + HMACSHA256**\r\n\r\n##Whats is uniq with layerprox?\r\na normal obfusciation system makes the data look like random http data. \r\nthis projects makes it look like the packages are goin to facebook, ebay etc.\r\nThis project makes the packages look like user a visit site b. but user a is really visits site c\r\nBy doing this we bypass deep package inspection systems(the data just looks like regular traffic) and the encryption\r\nprotects against deep package injection\r\n\r\nencryption: pgp + aes-ctr + hmac\r\n\r\neach user has its uniq keys for the crypto with a expire date to help improve security\r\n\r\nCurrently works on/with:\r\n-----------------------\r\nDebian 7-8, kali 1-2, mac osx, windows 7, raspberry pi(raspbian jessie)\r\nand also works with proxychains so you can proxy applications through it\r\n\r\n\r\n\r\nVersion 2:\r\n-----------\r\nversion 2  will be out soon here is the new features:\r\nconnections go like this:\r\n```console\r\nyou/user -> Tor -> LayerProx client -> LayerProx server\r\n```\r\npublic LayerProx server will come up soon\r\n\r\n\r\nhave been added:\r\ncrypto sys: pgp + aes-ctr + hmac\r\n\r\ninstall:\r\n--------\r\npython setup.py\r\ncreate a test user on the client and server and then make pgp keys for those two\r\n\r\nWhat is LayerProx?\r\n-----------------\r\n```console\r\nLayerProx is an advanced easy to reprogram proxy\r\nLayerProx operates like this:\r\nyou set up a server and client machine you then proxy your \r\nconnection to the client machine useing a socks4a proxy. \r\nThe data then gets encrypted in multiple Layers to \r\nprovide strong end to end encryption. the encryption:\r\n\r\norignal data --> fte cipher --> scrypt --> pgp --> chacha20_poly1305 --> fte cipher + the spoofed http data \r\n\r\nso the data will look like we are just browseing the webb or looking \r\nat cute cat pictures.\r\nLayerProx is the first project in the world which \r\nimplements \"real http spoofing\" \r\nmeaning that you can press on the generated http link and \r\nactually get somewhere \r\n\r\nWhy i have added different layers of encryption is to make the \r\nend to end encryption really strong \r\non alot of other applications they have just implemented one crypto\r\nso if the mitm-attacker gets our data he will only need to decrypt one layer\r\nBut here i have added multiple layers so the attack will have to work \r\nhim/her self through multiple layers of encryption.\r\n\r\ni have(tried) to make it really easy for anyone to modify and rebuild this\r\nso if you feel like changeing the encryption to diffie hellman or something\r\nelse it is easy to do so\r\n\r\n```\r\n\r\nstart:\r\n------\r\n```console\r\n./bin/marionette_server --server_ip 0.0.0.0 --proxy_ip 0.0.0.0 --proxy_port 8081 --format custom/ebay --debug\r\n\r\n ./bin/marionette_client --server_ip 0.0.0.0 --client_ip 127.0.0.1 --client_port 8079 --format custom/ebay --debug\r\n\r\n./bin/socksserver --local_port 8081\r\n\r\n\r\n curl --socks4a 127.0.0.1:8079 example.com\r\n```\r\n0.0.0.0 to bind all interfaces \r\n\r\n**See documenation folder for more documentation and how to guides**\r\n\r\n\r\nLayerProx is based on https://github.com/marionette-tg/marionette\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}